{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#Importing libararies\n",
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import os\n",
    "import matplotlib.pyplot as plt\n",
    "plt.rcParams['figure.figsize'] = (12,10)\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "import seaborn as Sb\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import accuracy_score , classification_report, confusion_matrix\n",
    "import warnings\n",
    "import math\n",
    "import random\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(241600, 18)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MWG</th>\n",
       "      <th>NWG</th>\n",
       "      <th>KWG</th>\n",
       "      <th>MDIMC</th>\n",
       "      <th>NDIMC</th>\n",
       "      <th>MDIMA</th>\n",
       "      <th>NDIMB</th>\n",
       "      <th>KWI</th>\n",
       "      <th>VWM</th>\n",
       "      <th>VWN</th>\n",
       "      <th>STRM</th>\n",
       "      <th>STRN</th>\n",
       "      <th>SA</th>\n",
       "      <th>SB</th>\n",
       "      <th>Run1 (ms)</th>\n",
       "      <th>Run2 (ms)</th>\n",
       "      <th>Run3 (ms)</th>\n",
       "      <th>Run4 (ms)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>115.26</td>\n",
       "      <td>115.87</td>\n",
       "      <td>118.55</td>\n",
       "      <td>115.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>78.13</td>\n",
       "      <td>78.25</td>\n",
       "      <td>79.25</td>\n",
       "      <td>79.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>79.84</td>\n",
       "      <td>80.69</td>\n",
       "      <td>80.76</td>\n",
       "      <td>80.97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>84.32</td>\n",
       "      <td>89.90</td>\n",
       "      <td>86.75</td>\n",
       "      <td>85.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>115.13</td>\n",
       "      <td>121.98</td>\n",
       "      <td>122.73</td>\n",
       "      <td>114.81</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   MWG  NWG  KWG  MDIMC  NDIMC  MDIMA  NDIMB  KWI  VWM  VWN  STRM  STRN  SA  \\\n",
       "0   16   16   16      8      8      8      8    2    1    1     0     0   0   \n",
       "1   16   16   16      8      8      8      8    2    1    1     0     0   0   \n",
       "2   16   16   16      8      8      8      8    2    1    1     0     0   1   \n",
       "3   16   16   16      8      8      8      8    2    1    1     0     0   1   \n",
       "4   16   16   16      8      8      8      8    2    1    1     0     1   0   \n",
       "\n",
       "   SB  Run1 (ms)  Run2 (ms)  Run3 (ms)  Run4 (ms)  \n",
       "0   0     115.26     115.87     118.55     115.80  \n",
       "1   1      78.13      78.25      79.25      79.19  \n",
       "2   0      79.84      80.69      80.76      80.97  \n",
       "3   1      84.32      89.90      86.75      85.58  \n",
       "4   0     115.13     121.98     122.73     114.81  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"C:\\\\Surbhi\\\\Applied ML\\\\sgemm_product_dataset\\\\sgemm_product.csv\")\n",
    "print(df.shape)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MWG          0\n",
       "NWG          0\n",
       "KWG          0\n",
       "MDIMC        0\n",
       "NDIMC        0\n",
       "MDIMA        0\n",
       "NDIMB        0\n",
       "KWI          0\n",
       "VWM          0\n",
       "VWN          0\n",
       "STRM         0\n",
       "STRN         0\n",
       "SA           0\n",
       "SB           0\n",
       "Run1 (ms)    0\n",
       "Run2 (ms)    0\n",
       "Run3 (ms)    0\n",
       "Run4 (ms)    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Code to find if there is any missing values\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(241600, 19)\n"
     ]
    }
   ],
   "source": [
    "df[\"average_run\"] = df.iloc[:,14:].mean(axis = 1)\n",
    "df.head()\n",
    "print(df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Taking log of the Average run times\n",
    "df[\"log_avg_run\"] = np.log(df.average_run) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MWG</th>\n",
       "      <th>NWG</th>\n",
       "      <th>KWG</th>\n",
       "      <th>MDIMC</th>\n",
       "      <th>NDIMC</th>\n",
       "      <th>MDIMA</th>\n",
       "      <th>NDIMB</th>\n",
       "      <th>KWI</th>\n",
       "      <th>VWM</th>\n",
       "      <th>VWN</th>\n",
       "      <th>STRM</th>\n",
       "      <th>STRN</th>\n",
       "      <th>SA</th>\n",
       "      <th>SB</th>\n",
       "      <th>average_run</th>\n",
       "      <th>log_avg_run</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>116.3700</td>\n",
       "      <td>4.756775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>78.7050</td>\n",
       "      <td>4.365707</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>80.5650</td>\n",
       "      <td>4.389064</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>86.6375</td>\n",
       "      <td>4.461733</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>118.6625</td>\n",
       "      <td>4.776283</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   MWG  NWG  KWG  MDIMC  NDIMC  MDIMA  NDIMB  KWI  VWM  VWN  STRM  STRN  SA  \\\n",
       "0   16   16   16      8      8      8      8    2    1    1     0     0   0   \n",
       "1   16   16   16      8      8      8      8    2    1    1     0     0   0   \n",
       "2   16   16   16      8      8      8      8    2    1    1     0     0   1   \n",
       "3   16   16   16      8      8      8      8    2    1    1     0     0   1   \n",
       "4   16   16   16      8      8      8      8    2    1    1     0     1   0   \n",
       "\n",
       "   SB  average_run  log_avg_run  \n",
       "0   0     116.3700     4.756775  \n",
       "1   1      78.7050     4.365707  \n",
       "2   0      80.5650     4.389064  \n",
       "3   1      86.6375     4.461733  \n",
       "4   0     118.6625     4.776283  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.drop(['Run1 (ms)', 'Run2 (ms)','Run3 (ms)', 'Run4 (ms)'], axis = 1, inplace = True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Experiment 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Dropping the Average run column\n",
    "df.drop(['average_run'], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MWG</th>\n",
       "      <th>NWG</th>\n",
       "      <th>KWG</th>\n",
       "      <th>MDIMC</th>\n",
       "      <th>NDIMC</th>\n",
       "      <th>MDIMA</th>\n",
       "      <th>NDIMB</th>\n",
       "      <th>KWI</th>\n",
       "      <th>VWM</th>\n",
       "      <th>VWN</th>\n",
       "      <th>STRM</th>\n",
       "      <th>STRN</th>\n",
       "      <th>SA</th>\n",
       "      <th>SB</th>\n",
       "      <th>log_avg_run</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.210997</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.118479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.210997</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.228050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.210997</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.207353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.210997</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.142961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.210997</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.135766</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        MWG       NWG       KWG     MDIMC     NDIMC     MDIMA     NDIMB  KWI  \\\n",
       "0 -1.516757 -1.516757 -1.210997 -0.753894 -0.753894 -0.998054 -0.998054 -1.0   \n",
       "1 -1.516757 -1.516757 -1.210997 -0.753894 -0.753894 -0.998054 -0.998054 -1.0   \n",
       "2 -1.516757 -1.516757 -1.210997 -0.753894 -0.753894 -0.998054 -0.998054 -1.0   \n",
       "3 -1.516757 -1.516757 -1.210997 -0.753894 -0.753894 -0.998054 -0.998054 -1.0   \n",
       "4 -1.516757 -1.516757 -1.210997 -0.753894 -0.753894 -0.998054 -0.998054 -1.0   \n",
       "\n",
       "        VWM       VWN  STRM  STRN   SA   SB  log_avg_run  \n",
       "0 -0.741449 -0.741449  -1.0  -1.0 -1.0 -1.0     0.118479  \n",
       "1 -0.741449 -0.741449  -1.0  -1.0 -1.0  1.0    -0.228050  \n",
       "2 -0.741449 -0.741449  -1.0  -1.0  1.0 -1.0    -0.207353  \n",
       "3 -0.741449 -0.741449  -1.0  -1.0  1.0  1.0    -0.142961  \n",
       "4 -0.741449 -0.741449  -1.0   1.0 -1.0 -1.0     0.135766  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sc_data = StandardScaler()\n",
    "df = sc_data.fit_transform(df)\n",
    "df = pd.DataFrame(df)\n",
    "df.columns = ['MWG', 'NWG', 'KWG', 'MDIMC', 'NDIMC', 'MDIMA', 'NDIMB', 'KWI',\n",
    "       'VWM', 'VWN', 'STRM', 'STRN', 'SA', 'SB', 'log_avg_run']\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(241600, 15)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Conversion to matrices\n",
    "X = df.iloc[:,0:14]\n",
    "ones = np.ones([X.shape[0],1])\n",
    "X = np.concatenate((ones,X),axis=1)\n",
    "\n",
    "Y = df.iloc[:,14:].values \n",
    "beta = np.zeros([1,15])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Splitting the data into training and test set\n",
    "X_train_1,X_test_1,y_train_1,y_test_1 = train_test_split(X,Y, test_size = 0.3,random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Computation of cost\n",
    "def calculateCost(X,Y,beta):\n",
    "    tsum = np.power(((X @ beta.T)-Y),2)\n",
    "    InitialCost = np.sum(tsum)/(2 * len(X))\n",
    "    return InitialCost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5000000000000001\n"
     ]
    }
   ],
   "source": [
    "#Compute cost with all Betas as zeroes\n",
    "InitialCost = calculateCost(X, Y, beta)\n",
    "print(InitialCost)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gradientDescent(X,Y,beta,iters,alpha):\n",
    "    cost = np.zeros(iters)\n",
    "    for i in range(iters):\n",
    "        beta = beta - (alpha/len(X)) * np.sum(X * (X @ beta.T - Y), axis=0)\n",
    "        cost[i] = calculateCost(X, Y, beta)\n",
    "    \n",
    "    return beta,cost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Implement batch gradient descent with convergence threshold as input\n",
    "def gradientDescentThresh(X,Y,beta,alpha,i,iters=1000):\n",
    "    cost = []\n",
    "    diff = 1\n",
    "    convg = 0\n",
    "    while diff > thresh:\n",
    "        beta = beta - (alpha/len(X)) * np.sum(X * (X @ beta.T - Y), axis=0)\n",
    "        cost.append(calculateCost(X, Y, beta))\n",
    "        if len(cost)==1:\n",
    "            diff = cost[0]\n",
    "        else:\n",
    "            diff = abs(cost[-1] - cost[-2])\n",
    "            if diff <= thresh:\n",
    "                convg = len(cost)\n",
    "    return beta,cost,convg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plotResults(X,Y,X_test,Y_test,beta,iters,alpha):\n",
    "    beta_c,cost_c = gradientDescent(X,Y,beta,iters,alpha)\n",
    "\n",
    "    #print(\"The value of cost function converges at:\", convg_cal)\n",
    "    \n",
    "    print(\"The beta values:\",beta_c)\n",
    "    print(\"The cost function value:\", cost_c[-1])\n",
    "   \n",
    "    Y_hat_train = X.dot(beta_c.T)\n",
    "    Y_hat_test = X_test.dot(beta_c.T)\n",
    "   \n",
    "    #MSE Calculation for training dataset\n",
    "    MSE_train = (np.sum((Y - Y_hat_train) ** 2) / len(Y));\n",
    "    print(\"Train data MSE:\", MSE_train)\n",
    "    \n",
    "    #MSE Calculation for test dataset\n",
    "    MSE_test = (np.sum((Y_test - Y_hat_test) ** 2) / len(Y_test));\n",
    "    print(\"Test data MSE:\", MSE_test)\n",
    "\n",
    "    plt.plot(cost_c) \n",
    "    plt.xlabel(\"Number of iterations\") \n",
    "    plt.ylabel(\"Cost\") \n",
    "    plt.title(\"Cost Converging wrt Iterations\")\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The beta values: [[ 0.00028654  0.04377475  0.03296393 -0.00150873 -0.02435863 -0.02348476\n",
      "  -0.00211047 -0.0029404  -0.00086463  0.01924638  0.01307966 -0.00575309\n",
      "  -0.00062398 -0.00778665 -0.00208716]]\n",
      "The cost function value: 0.45318816271001255\n",
      "Train data MSE: 0.9063763254200251\n",
      "Test data MSE: 0.8994117237966124\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#alpha = 0.0001\n",
    "plotResults(X_train_1,y_train_1,X_test_1,y_test_1,beta,1000,0.0001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The beta values: [[ 0.00183939  0.28533441  0.2182029   0.00772861 -0.18008307 -0.17334639\n",
      "  -0.0059886  -0.01079932 -0.00601136  0.08171182  0.05000378 -0.03804811\n",
      "  -0.00426042 -0.05211287 -0.01357392]]\n",
      "The cost function value: 0.2765918882249232\n",
      "Train data MSE: 0.5531837764498464\n",
      "Test data MSE: 0.5526527125212528\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYgAAAEWCAYAAAB8LwAVAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAgAElEQVR4nO3dd3xV9f3H8dcni7AhEPYIIBtlhaHIsKWKVnHhHlBXtai12p9Va6u1tUOto466Vx24FSduXKyAyhQJe+89E/L5/XFO7G28JAFyc5Ob9/PxuA/u2Z9zT7jve9b3mLsjIiJSVFK8CxARkYpJASEiIlEpIEREJCoFhIiIRKWAEBGRqBQQIiISlQJC5ACZ2SwzGxLvOiojM9tmZm3jXYcUTwFRhZnZ2WaWE/5nXWlm75rZkQc5z0VmNrSEceqY2d1mtiRcdm7Y3fBgll3e3L2ru38a7zoimdnNZvZMCeP8sI3MbJSZfRHjmj41s4si+7l7LXdfEMvlysFTQFRRZnY1cDfwV6Ax0Ap4ADgxxstNAz4CugLDgDrAEcB6oG8sl70/zCwl3jXsr3jUXBk/J9kP7q5XFXsBdYFtwGnFjFONIEBWhK+7gWrhsIbAW8AmYAPwOcGPjf8ABcDOcP7XRpnvRcBqoFYxy+4MfBrOfxYwPGLYk8D9wNvAVmAS0C4c9iBwR5F5vQFcHb5vBrwCrAUWAldGjHcz8DLwDLAlrLM68BSwEZgDXAssi5hmETA0YvoXgafDumYB2RHj9gK+Doe9BLwA/GUf678Y6B2+PxdwoEvE5/f6Pmq+HNgD5IWf/7f7mP8iYGj4Oe8C9objb4rY9ncAS8Jt9SBQPRw2BFgG/A5YFW7z+uHfw9rws3oLaBGOf2s4/13hMu4L+ztwSMTf49Ph9IuBG4GkcNgo4Iuwno3hdjs2Yl1GAQvCz3UhcE68/38l0ivuBegVh40e/HLPB1KKGecWYCLQCMgEvgL+HA77W/ilkRq+BgIWDvvhS3Mf8x0DPFXM8FQgF7gBSAN+Ev7n7xgOf5IglPoCKcCzwJhw2CBgaUQt9QnCqhlBgE0F/hjOt234xXJMOO7N4RfrSeG41YG/A+PD+bQAplN8QOwCjgOSw89oYjgsLfzi+3W4fqcQfJHvKyCeBq4J3z8MzAcuixj2m2Jqvhl4poTtH1n3KOCLIsPvBsYCGUBt4E3gb+GwIeHfzj8IgqQ60AA4FagRjv8SYYiF03wKXFRkGZEB8TRBkNcGsoDvgQsj6ssDLg4/18sIfrAYUJMgGAv/NpoCXeP9/yuRXjrEVDU1ANa5e34x45wD3OLua9x9LfAn4LxwWB7Bf8bW7p7n7p97+D+0lMteWczw/kAt4O/uvsfdPyb4RXpWxDivuvvksP5ngR5h/88JvngGht0jgAnuvgLoA2S6+y3hfBcAjwBnRsx3gru/7u4F7r4TOB34q7tvdPdlwL9KWLcv3P0dd99L8Mu6e8Q6pQD/Cj+vV4HJxcxnPDA4fD+QIGwKuweHw/dV80ExMyP4Mv6Nu29w960EhyEjP6cC4CZ33+3uO919vbu/4u47wvFvjai3pOUlA2cA17v7VndfBPyT//6tASx290fCz/Upgr+9xhG1dDOz6u6+0t1nHfDKy48oIKqm9UDDEo4fNyP41VtocdgP4HaCX/nvm9kCM7tuP5fdtITlLnX3giLLbh7RvSri/Q6CQCEMqTH8N0zOJggQgNZAMzPbVPgi2EtpHDGvpdFqKWZ4UUXrSg8/42bA8iIhWty8xgMDzawJwa/mF4ABZpZFcDjmm/2oaX9lEuwJTI34nN4L+xda6+67CjvMrIaZPWRmi81sC/AZUC/88i9JQ/67h1Von9vb3XeEb2u5+3aCcLkUWGlmb5tZp1KvqZRIAVE1TSA4HHJSMeOsIPhSLdQq7Ef4S+8ad28LnABcbWY/DccraU/iQ+AYM6tZzHJbmlnk32YrYHkJ8y30PDDCzFoD/QjOOUDwRbrQ3etFvGq7+3ER0xatfSXBoaVCLUtZQ1Ergebhr/MS5+XuuQQBcyXwWfirfBVwCcFeSmR4Fq15f5tnLjr+OoLDcl0jPqe67l6rmGmuAToC/dy9DsGhPggOA5VU0zqCPdKif2ul2t7uPs7df0bwo+M7gr1CKSMKiCrI3TcTHIu/38xOCn8BpprZsWZ2Wzja88CNZpYZXn76R4KToZjZ8WZ2SPiFt4XgJOTecLrVBMf39+U/BF/Wr5hZJzNLMrMGZnaDmR1HcNJ5O3BtWNMQghAaU8p1+5rgZOejwDh33xQOmgxsMbPfmVl1M0s2s25m1qeY2b0IXG9m9c2sOcFJ4AMxgeDzudzMUszsREq+Ymt8uLzCw0mfFunel9VAVpGALWn8FuHVZYTh8whwl5k1AjCz5mZ2TDHzqE0QKpvMLAO4Kcoyov5NhIeNXgRuNbPaYbBfTfi3Vhwza2xmw8MfG7sJToLvLWEy2Q8KiCrK3e8k+I94I8EX6lKCL6DXw1H+AuQQnJidAUwL+wG0J9gT2Ebw5feA//d+gL8RBMsmM/ttlOXuJriC5jvgA4KAmUxwqGGSu+8BhgPHEvy6fAA4392/24/Vez5cxnMRy91LEDQ9CK52WUcQInWLmc8tBFfsLAzX92WCL6L9Eq7TKcCFBFdmnUtwXqW4eY0n+OL9bB/d+/JS+O96M5tWivI+JrjiapWZrQv7/Y7gEOLE8JDRhwR7CPtyN8HJ6nUEFza8V2T4PQR7dRvNLNp5nCsIfhQsILhi6Tng8VLUnkSw97KC4MKFwcCvSjGdlFLh1R4iUgIzuww4091LdQK2hHlNAh509ycOvjKR2NAehMg+mFlTMxsQHgbrSPBr9bUDnNdgM2sSHmIaCRzGj39pi1QougtSZN/SgIeANgSHhsYQHPI6EB0JjrXXIrivYYS7F3e5r0jc6RCTiIhEpUNMIiISVcIcYmrYsKFnZWXFuwwRkUpl6tSp69w9M9qwhAmIrKwscnJy4l2GiEilYmaL9zVMh5hERCQqBYSIiESlgBARkagUECIiEpUCQkREolJAiIhIVDENCDMbZmZzzSw32kNlzGyUma01s2/C10URw0aa2bzwNTKWdYqIyI/FLCDCp0ndT9BscxfgLDPrEmXUF9y9R/h6NJy2sE35fgTt5t9kZvVjUeemHXu4eewsNu/Mi8XsRUQqrVjuQfQFct19Qdge/hjgxFJOewzwQfhM3I0Ezw0YFosil2zYwdMTFnHr27NjMXsRkUorlgHRnP99Xu4y/vc5s4VONbPpZvaymRU+hrFU05rZJWaWY2Y5a9euPaAiD2tRj0sGtePFnGV89v2BzUNEJBHFMiAsSr+iTce+CWS5+2EET616aj+mxd0fdvdsd8/OzIzalEipXDW0Pe0ya3L9qzPYtjv/gOcjIpJIYhkQy/jfB7O3IHzofSF3Xx8+ghKC5+D2Lu20ZSk9NZnbRnRnxead/O2dObFajIhIpRLLgJgCtDezNuED0c8ExkaOYGZNIzqHA4XfzuOAo8OHxdcHjg77xUzv1vW5YEAbnp20hK/mryt5AhGRBBezgHD3fOBygi/2OcCL7j7LzG4xs+HhaFea2Swz+xa4EhgVTrsB+DNByEwBbgn7xdRvj+5IVoMaXPfKDHbs0aEmEanaEuaJctnZ2V4WzX1PWrCeMx6eyKgjsrh5eNcyqExEpOIys6nunh1tmO6kLqJf2waMPLw1T01YxJRFMd9pERGpsBQQUVw7rBMt6lfn2pensytvb7zLERGJCwVEFDWrpfCPUw5j4brt3Pbe3HiXIyISFwqIfTjikIacf3hrHv9yoa5qEpEqSQFRjOuP7UzbhjX5v5ems2WX2moSkapFAVGM6mnJ/PP07qzasos/jVVbTSJStSggStCzVX1GD2nHK9OW8d7MVfEuR0Sk3CggSuGKn7anW/M63PDaDNZu3V3yBCIiCUABUQqpyUncdXoPtu3O5/pXp5MoNxeKiBRHAVFK7RvX5tpjOvLhnDW8lLMs3uWIiMScAmI/XDCgDf3bZvCnN2exdMOOeJcjIhJTCoj9kJRk3HFad5LMuOqFb8jfWxDvkkREYkYBsZ9a1K/BX07uxtTFG/nXx7nxLkdEJGYUEAfgxB7NObVXC+77eB6TF6pBPxFJTAqIA/SnE7vSKqMGV435ms07dJe1iCQeBcQBqlUthXvO7Mmarbu5/jVd+ioiiUcBcRC6t6zHNUd35J0Zq3gxZ2m8yxERKVMKiIP0y0FtGXBIA24eO5vcNdviXY6ISJlRQBykpCTjztN7kJ6axJXPf83ufD1gSEQSgwKiDDSuk87tI7oze+UW/v7ud/EuR0SkTCggysjQLo0ZdUQWT3y5SK2+ikhCUECUoeuP60T3FnX5v5e/Zcl6NcUhIpWbAqIMVUtJ5r6ze2HA6Oem6XyEiFRqCogy1jKjBref1p0Zyzfz17fnxLscEZEDpoCIgWO6NuGiI9vw1ITFvDV9RbzLERE5IAqIGPndsZ3o2aoe170yg4Xrtse7HBGR/aaAiJHU5CTuO7sXKcnG6GensStP5yNEpHJRQMRQ83rVufP04P6IP705K97liIjsFwVEjP2kU2MuG9KO5ycvZczkJfEuR0Sk1BQQ5eC3R3fkyEMa8sc3ZvHN0k3xLkdEpFQUEOUgOcn411k9yaxdjcuemcq6bbvjXZKISIkUEOUko2YaD53Xmw3b93DFc1/redYiUuEpIMpRt+Z1ufXkQ5mwYD23jZsb73JERIqlgChnI3q34Lz+rXn4swW6iU5EKjQFRBz84fgu9GpVj2tfns7cVVvjXY6ISFQxDQgzG2Zmc80s18yuK2a8EWbmZpYddmeZ2U4z+yZ8PRjLOstbWkoS/z63NzXSUvjlf3LYvCMv3iWJiPxIzALCzJKB+4FjgS7AWWbWJcp4tYErgUlFBs139x7h69JY1Rkvjeuk8+9ze7F8004uf36aTlqLSIUTyz2IvkCuuy9w9z3AGODEKOP9GbgN2BXDWiqkPlkZ/OWkbnw+bx23vqOWX0WkYollQDQHlkZ0Lwv7/cDMegIt3f2tKNO3MbOvzWy8mQ2MtgAzu8TMcswsZ+3atWVWeHk6o08rLhjQhie+XKQ7rUWkQollQFiUfv7DQLMk4C7gmijjrQRauXtP4GrgOTOr86OZuT/s7tnunp2ZmVlGZZe/G47rxKAOmfzhjZlMWrA+3uWIiACxDYhlQMuI7hZA5HWdtYFuwKdmtgjoD4w1s2x33+3u6wHcfSowH+gQw1rjKiU5iXvP6knLjBpc9uw0lm7Q40pFJP5iGRBTgPZm1sbM0oAzgbGFA919s7s3dPcsd88CJgLD3T3HzDLDk9yYWVugPbAghrXGXd3qqTw2sg/5ewu46Kkctu3Oj3dJIlLFxSwg3D0fuBwYB8wBXnT3WWZ2i5kNL2HyQcB0M/sWeBm41N03xKrWiqJNw5rcf04vctdu46ox31BQ4CVPJCISI+aeGF9C2dnZnpOTE+8yysSTXy7k5jdn88vBbbn+2M7xLkdEEpiZTXX37GjDUsq7GCnZyCOyyF27jYfGL6BVRg3O6dc63iWJSBWkgKiAzIybT+jK8o07+eMbs2herzpDOjaKd1kiUsWoLaYKKiV8pnWnJrUZ/ew0Zq/YEu+SRKSKUUBUYDWrpfD4qD7UqZ7KBU9OYeXmnfEuSUSqEAVEBde4TjqPj+rDtt35XPCkLn8VkfKjgKgEOjetwwPn9OL71VsZ/awa9hOR8qGAqCQGdcjk1pO6Mf77tfzhjVkkyuXJIlJx6SqmSuTMvq1YunEH938yn8Z1qnHV0IRtfUREKgAFRCXz26M7smbLbu7+cB4Na1Xj3P66R0JEYkMBUcmYGX875VA2bN/DH96YSYOaaRx7aNN4lyUiCUjnICqhwnskerasx6/HfMOE+WoiXETKngKikqqelszjo/rQqkENLnk6RzfSiUiZU0BUYvVqpPH0BX2plZ7CyCcms2S9niMhImVHAVHJNatXnacv6Mue/ALOf3wSa7fujndJIpIgFBAJoH3j2jw+KptVW3Zx3mOT2LRjT7xLEpEEoIBIEL1bZ/DwedksWLudkU9MUZMcInLQFBAJZFCHTO49uyczl2/moqemsCtvb7xLEpFKTAGRYI7p2oR/ntadSQs3cOkzU9mTr3abROTAKCAS0Ek9m3PrSYfy6dy1XPXC12rcT0QOiO6kTlBn92vFjj35/OXtOVRPncHtIw4jKcniXZaIVCIKiAR20cC2bNudz90fzqNGWjK3nNgVM4WEiJSOAiLB/fqn7dmxZy8Pf7aA5CTjphO6KCREpFQUEAnOzLj+2E7k7S3giS8XYQZ/PF4hISIlU0BUAWbGH4/vAhCEBMYfju+skBCRYikgqojCkHCHx79ciBnc+HOFhIjsmwKiCjELzkEAPPbFQpIMbjhOISEi0SkgqpjIkHjk84U/nKNQSIhIUQqIKqgwJNydhz9bgLtrT0JEfkQBUUWZGTcPD+6LeOTzhezKK+BPw7vqZjoR+YECogor3JOolprEQ+MXsDNvL/849TCSFRIiggKiyjMzrhvWiZppKdz5wffsytvLXWf0IDVZzXSJVHUKCMHMuPKn7amemsyt78xhV14B953dk/TU5HiXJiJxpJ+J8oOLB7Xlzyd25cM5q7n46Rx27tHzJESqMgWE/I/zDs/i9hGH8WXuOkY+Ppmtu/LiXZKIxIkCQn7ktOyW3HNmT6Yt2chZj0xk7dbd8S5JROIgpgFhZsPMbK6Z5ZrZdcWMN8LM3MyyI/pdH04318yOiWWd8mMndG/GIyOzyV2zjdMe/IqlG3bEuyQRKWcxCwgzSwbuB44FugBnmVmXKOPVBq4EJkX06wKcCXQFhgEPhPOTcnRUx0Y8e1F/Nu7I45R/f8WclVviXZKIlKNY7kH0BXLdfYG77wHGACdGGe/PwG3Aroh+JwJj3H23uy8EcsP5STnr3bo+L116OMlmnP7QBCYv3BDvkkSknMQyIJoDSyO6l4X9fmBmPYGW7v7W/k4bTn+JmeWYWc7atWvLpmr5kQ6Na/PKr44gs3Y1zntsEh/MXh3vkkSkHMQyIKLdjus/DDRLAu4CrtnfaX/o4f6wu2e7e3ZmZuYBFyola16vOi9fegSdmtTm0mem8mLO0pInEpFKrVQBYWb/KU2/IpYBLSO6WwArIrprA92AT81sEdAfGBueqC5pWomDjJppPHdxf45o14BrX57OfR/Pw/1HuS0iCaK0exBdIzvCE8a9S5hmCtDezNqYWRrBSeexhQPdfbO7N3T3LHfPAiYCw909JxzvTDOrZmZtgPbA5FLWKjFUs1oKj43sw0k9mnHH+99z/aszyNtbEO+yRCQGim1qw8yuB24AqptZ4SUsBuwBHi5uWnfPN7PLgXFAMvC4u88ys1uAHHcfW8y0s8zsRWA2kA+Mdnfd1ltBpKUkcdcZPWiZUYN7P85lxeZd3H92T2qnp8a7NBEpQ1aaQwRm9jd3v74c6jlg2dnZnpOTE+8yqpwXpizhhtdm0r5RLZ74RR+a1q0e75JEZD+Y2VR3z442rLSHmN4ys5rhzM41szvNrHWZVSiV1hl9WvHEqD4s27iTk+//itkrdK+ESKIobUD8G9hhZt2Ba4HFwNMxq0oqlUEdMnnp0sMBOP2hCYz/XpcciySC0gZEvgfHok4E7nH3ewiuQhIBoHPTOrw+egAtM2pwwZNTeHbS4niXJCIHqbQBsTU8YX0e8HZ4FZPOSMr/aFI3nRd/2Z9B7Rvy+9dmcvPYWeTrCieRSqu0AXEGsBu4wN1XEdzVfHvMqpJKq3Z6Ko+O7MPFA9vw5FeLGPXEFDbvUJPhIpVRqQIiDIVngbpmdjywy911DkKiSk4yfv/zLtw24jAmLVzPSQ98yfy12+Jdlojsp9LeSX06wY1qpwGnA5PMbEQsC5PK7/Tsljx/cX+27MzjpPu/5DOdvBapVEp7iOn3QB93H+nu5xO0rPqH2JUliSI7K4M3Lh9A83rVGfXEZJ74cqGa5xCpJEobEEnuviaie/1+TCtVXIv6NXjlsiMY2rkxf3pzNte+PJ1deboxXqSiK+2X/HtmNs7MRpnZKOBt4J3YlSWJpma1FB48tzdX/rQ9L01dxmkPTmD5pp3xLktEilFsQJjZIWY2wN3/D3gIOAzoDkyghLaYRIpKSjKu/lkHHj0/m0XrtnPCvV/wZe66eJclIvtQ0h7E3cBWAHd/1d2vdvffEOw93B3r4iQxDe3SmDcuH0CDmmmc99gkHho/X+clRCqgkgIiy92nF+0ZNsmdFZOKpEpom1mL10cP4NhuTfnbu98x+rlpbNudH++yRCRCSQGRXswwNdspB6VmtRTuO7snNxzXifdmruLk+3W/hEhFUlJATDGzi4v2NLMLgamxKUmqEjPjkkHteObCfqzfvofh937B2G/18ECRiqDY50GYWWPgNYIHBBUGQjaQBpwc3mFdIeh5EJXfik07ueL5r5m6eCPn9GvFH47vQnpqcrzLEkloxT0Potgnyrn7auAIMzuK4PnRAG+7+8dlXKMIzepVZ8wl/bnj/bk8NH4B05Zs4oFzetGmYc14lyZSJZXqiXKVgfYgEsvH363m6he/JS+/gL+fehgndG8W75JEElJZPFFOpFz9pFNj3rlyIB2b1OaK57/mxtdn6O5rkXKmgJAKq1m96rzwy8P55aC2PDNxCac88BW5a3SVk0h5UUBIhZaanMT1x3XmsZHZrNy8k+Pv/ZxnJy3WjXUi5UABIZXCTzs3ZtxVg+iTlcHvX5vJJf+Zyobte+JdlkhCU0BIpdGoTjpP/aIvN/68M5/OXcOwuz/ji3lqy0kkVhQQUqkkJRkXDWzL66MHUDs9hXMfm8Rf35nD7nydwBYpawoIqZS6NqvLW1cM5Jx+rXj4swXhCeyt8S5LJKEoIKTSqp6WzK0nH8oj52ezYtNOfv6vL3j08wUUFOgEtkhZUEBIpfezLo0Z95tBDGzfkL+8PYczH5nIkvU74l2WSKWngJCE0Kh2Oo+cn80dp3VnzootDLvnM56ZqMthRQ6GAkIShpkxoncLxv1mEL1b1+fG12dy/uOTWaFHm4ocEAWEJJxm9arz9AV9+ctJ3Zi6eCPH3P0ZL09dpr0Jkf2kgJCEZGac27817/56IJ2b1OG3L33LL56cwnLtTYiUmgJCElrrBjV5/pL+3HRCFyYv3MDRd47nqa8W6UonkVJQQEjCS04yfjGgDeOuGkTvrAxuGjuL0x6aoPsmREqggJAqo2VGDZ76RR/uPL0789du47h7vuBfH81jT35BvEsTqZAUEFKlmBmn9GrBh1cP5uiujbnzg+8Zft8XfLN0U7xLE6lwYhoQZjbMzOaaWa6ZXRdl+KVmNsPMvjGzL8ysS9g/y8x2hv2/MbMHY1mnVD0Na1XjvrN78ej52WzakcfJD3zJH9+YyZZdefEuTaTCiNkjR80sGfge+BmwDJgCnOXusyPGqePuW8L3w4FfufswM8sC3nL3bj+a8T7okaNyoLbuyuOf73/P0xMWkVGzGn84vjPDuzfDzOJdmkjMxeuRo32BXHdf4O57gDHAiZEjFIZDqCagS0uk3NVOT+Xm4V15Y/SRNK+Xzq/HfMM5j07S0+ukyotlQDQHlkZ0Lwv7/Q8zG21m84HbgCsjBrUxs6/NbLyZDYy2ADO7xMxyzCxn7dq1ZVm7VEGHtqjLq78awJ9P6saM5Zs59p7PuGPcXD0LW6qsWAZEtP3zH+0huPv97t4O+B1wY9h7JdDK3XsCVwPPmVmdKNM+7O7Z7p6dmZlZhqVLVZWcZJzXvzUfXzOEEw5rxn2f5PKzu8bz8Xer412aSLmLZUAsA1pGdLcAVhQz/hjgJAB33+3u68P3U4H5QIcY1SnyI5m1q3HnGT14/uL+VEtJ5oInc7jgySksXLc93qWJlJtYBsQUoL2ZtTGzNOBMYGzkCGbWPqLz58C8sH9meJIbM2sLtAcWxLBWkagOb9eAd64cyA3HdQruxL5rPH97Zw5bdbWTVAEpsZqxu+eb2eXAOCAZeNzdZ5nZLUCOu48FLjezoUAesBEYGU4+CLjFzPKBvcCl7r4hVrWKFCctJYlLBrXjpJ7NuWPcXB7+fAGvTFvOtcM6MqJXC5KSdLWTJKaYXeZa3nSZq5SX6cs2cfPYWUxbsonDWtTlphO60rt1/XiXJXJA4nWZq0hCOqxFPV657AjuOqM7q7fs4tR/f8VvXviGlZvVUqwkFgWEyAEwM07u2YKPrxnC6KPa8faMlQy5/VNue+873Y0tCUMBIXIQalZL4f+O6cTH1wzm2G5NeODT+Qy5/VOe+mqRGgGUSk8BIVIGWtSvwd1n9uTNy4+kY+Pa3DR2FkffNZ53Z6zUk+yk0lJAiJShQ1vU5bmL+/H4qGxSk5O47NlpjHhwAlMX6yI8qXwUECJlzMz4SafGvPvrgfz9lENZumEHp/57Ar/8Tw7zVushRVJ56DJXkRjbsSefRz5byCOfL2D7nnxO7tGcq4Z2oFWDGvEuTaTYy1wVECLlZMP2PTw0fj5PfrWIvQXOGX1acsVP2tOkbnq8S5MqTAEhUoGs3rKL+z7OZcyUJSRZ0DjgZUPa0aBWtXiXJlWQAkKkAlq6YQf3fDSPV6cto3pqMhce2YaLBrWlTnpqvEuTKkQBIVKB5a7Zxl0ffM/bM1ZSOz2FCwa04YIBbahbQ0EhsaeAEKkEZq3YzL0f5fLerFXUqpbCqCOyuPDINtSvmRbv0iSBKSBEKpHvVm3h3o9zeWfGSqqnJnP+4VlcNLANDXWOQmJAASFSCX2/eiv3fZzLm9NXkJ6SzDn9WnHJ4LY0qq2rnqTsKCBEKrHcNdt44JNcXv9mOanJSZzRpyUXD2xLywzdRyEHTwEhkgAWrdvO/WFQFDj8/NCmXDq4HV2a/ehx7SKlpoAQSSArN+/k8S8W8tykJWzfs5fBHTK5dHA7+rfNwExPt5P9o4AQSUCbd+TxzKTFPPHlQtZt20P3lvW4bHBbju7SRI9BlVJTQIgksF15e3lp6jIe+WwBSzbsoG3Dmlw0sC2n9GpOempyvMuTCk4BIVIF7C1w3p25kgfHz2fm8jTAEDoAABDCSURBVC3Ur5HKOf1ac97hrWlcR1c+SXQKCJEqxN2ZvHADj32xkA/mrCbZjOMPa8qFR7bl0BZ1412eVDDFBURKeRcjIrFlZvRr24B+bRuwZP0OnvhqIS9OWcrr36ygb1YGFxyZxc+6NCFZ5ymkBNqDEKkCtuzK48UpS3nyq0Us27iTFvWrM+qILE7r3VJtPlVxOsQkIkBwnuKD2at4/ItFTF60gfTUJE7q0Zxz+7emW3MdfqqKFBAi8iOzVmzmmYmLef3rFezM20vPVvU4t19rfn5YU139VIUoIERknzbvzOPVacv4z8TFLFi7nfo1Ujk9uyXn9Gutx6JWAQoIESmRuzNh/nr+M3Ex789eTYE7gztkcm6/1gzpmElKclK8S5QYUECIyH5ZtXkXz09ewvOTl7Bm624a16nGab1bcnp2S+1VJBgFhIgckLy9BXzy3RpemLKUT+auocDhiHYNOKNPS47p2kTnKhKAAkJEDtqqzbt4eepSXshZytINO6lbPZWTezbnjD4t6dxULcpWVgoIESkzBQXOhAXrGTNlKeNmrmLP3gK6t6jL6X1acvxhzahbXfdVVCYKCBGJiY3b9/Da18t5YcpS5q7eSlpKEj/r3JhTejVnUIdMUnViu8JTQIhITLk7M5dv4ZVpyxj77Qo2bN9Dg5ppDO/RjFN7taBrszp6VkUFpYAQkXKTt7eA8XPX8urXy/hw9hr27C2gQ+NanNKrBSf1aE6TumpZtiJRQIhIXGzekcdbM1bw6rTlTF28ETMY0K4hw3s045iuTXS+ogKIW0CY2TDgHiAZeNTd/15k+KXAaGAvsA24xN1nh8OuBy4Mh13p7uOKW5YCQqRiW7huO699vZzXvl7G0g07SUtOYnDHTE7o3oyhnRtRI02NS8dDXALCzJKB74GfAcuAKcBZhQEQjlPH3beE74cDv3L3YWbWBXge6As0Az4EOrj73n0tTwEhUjm4O98u28yb367grekrWL1lN9VTkxnapTHDuzdjUIeGVEvR/RXlJV7Pg+gL5Lr7grCIMcCJwA8BURgOoZpAYVqdCIxx993AQjPLDec3IYb1ikg5MDN6tKxHj5b1uOG4zkxZtIE3v13BOzNW8ua3K6idnsKwrk0Y3qMZh7dtoCY+4iiWAdEcWBrRvQzoV3QkMxsNXA2kAT+JmHZikWmbR5n2EuASgFatWpVJ0SJSfpKTjP5tG9C/bQNuHt6VL3PX8ea3K3lv5ipemrqMjJppHN2lMcO6NeGIdg1JS1FYlKdYBkS0a9p+dDzL3e8H7jezs4EbgZH7Me3DwMMQHGI6qGpFJK5Sk5MY0rERQzo2YldeNz6du4a3Z6zizW9XMGbKUuqkpzC0cxAWgzpkqpmPchDLgFgGtIzobgGsKGb8McC/D3BaEUkg6anJDOvWlGHdmrIrby9fzFvHuzNX8eGc1bz69XJqpCVzVMdGDOvWhKM6NaJWNZ3gjoVYfqpTgPZm1gZYDpwJnB05gpm1d/d5YefPgcL3Y4HnzOxOgpPU7YHJMaxVRCqo9PAE9tAujcnbW8CE+et5b9Yq3p+1irdnrCQtJYlB7TMZ1q0JP+nUiIyaafEuOWHELCDcPd/MLgfGEVzm+ri7zzKzW4Acdx8LXG5mQ4E8YCPB4SXC8V4kOKGdD4wu7gomEakaUpOTGNQhk0EdMvnzid3IWbSBd2euYtysYO8iyaB36/oM7RwESrvMWvEuuVLTjXIiUukVFDgzV2zmwzlr+HD2amavDC6QbNOwJkM7N2Jo58b0bl1fV0RFoTupRaRKWb5pJx/NWc0Hs1czccF68vY69WqkclTHICwGdWhI7XTdxQ0KCBGpwrbuyuPzeev4cPZqPp67hk078khNNvpkZTCkYyZDOjaifaNaVbYxQQWEiAiQv7eAaUs28eGc1Xw6dw3fr94GQLO66Qzu2IjBHTIZcEiDKrV3oYAQEYli+aadfPb9Wj6du4Yvc9ezbXc+KUlGdlb98J6MTDo2rp3QexcKCBGREuzJL2Dq4o2MDwPju1VbAWhSJ53BHTIZ2KEhR7RrmHCX0SogRET206rNu4K9i+/X8Pm8dWzdlQ9A12Z1OPKQhgw4pCF9sjKonla57+hWQIiIHIT8vQXMWL6ZL3PX8UXuOqYu3kjeXictOYneretzZPsgMA5tXpfkpMp1OEoBISJShnbsyWfKoo1BYMxb98N9F7XTUzi8bQOObB8cjmqXWbPCn7+IV3PfIiIJqUZaCoM7ZDK4QyYA67ft5qv56/kydx2fz1vH+7NXA9CwVjX6tc2gf5sM+rVtUOkup9UehIhIGXJ3Fq/fwcQF65m4YD2TFm5g5eZdADSomUbfNhn0a5NB/3YN6NCoNklxPiSlPQgRkXJiZmQ1rElWw5qc2bcV7s7SDTuZuDAMjAVB+1EA9WukhoHRgH5tM+jcpE7cAyOSAkJEJIbMjFYNatCqQQ1Ozw6eYrB0ww4mLdzApHAPY9ys4JBUnfQUerWuT3br+vRunUGPlvXiepWUAkJEpJy1zKhBy4wajOjdAoAVm3YyaeF6Ji/cyNTFG7hj7loAUpKMrs3q0Lt1Br1b1yc7qz6N66SXW506ByEiUsFs3pHHtCUbmbJoAzmLN/Lt0k3szi8AoEX96sEeRlYG2a3r06Fx7YO6tFbnIEREKpG6NVI5qlMjjurUCAju8p61YjNTF28kZ9FGvshdz+vfBA/ZrJ2ewhnZLbnx+C5lXocCQkSkgktLSaJnq/r0bFWfiwYGV0ot2bCDnEUbyVm8kab1qsdkuQoIEZFKxsxo3aAmrRvU5NTwPEYs6PFKIiISlQJCRESiUkCIiEhUCggREYlKASEiIlEpIEREJCoFhIiIRKWAEBGRqBKmLSYzWwssPohZNATWlVE5lUFVW1/QOlcVWuf909rdM6MNSJiAOFhmlrOvBqsSUVVbX9A6VxVa57KjQ0wiIhKVAkJERKJSQPzXw/EuoJxVtfUFrXNVoXUuIzoHISIiUWkPQkREolJAiIhIVFU+IMxsmJnNNbNcM7su3vWUFTNraWafmNkcM5tlZr8O+2eY2QdmNi/8t37Y38zsX+HnMN3MesV3DQ6MmSWb2ddm9lbY3cbMJoXr+4KZpYX9q4XdueHwrHjWfTDMrJ6ZvWxm34Xb+/AqsJ1/E/5dzzSz580sPdG2tZk9bmZrzGxmRL/93q5mNjIcf56ZjdyfGqp0QJhZMnA/cCzQBTjLzMr+wa7xkQ9c4+6dgf7A6HDdrgM+cvf2wEdhNwSfQfvwdQnw7/IvuUz8GpgT0f0P4K5wfTcCF4b9LwQ2uvshwF3heJXVPcB77t4J6E6w/gm7nc2sOXAlkO3u3YBk4EwSb1s/CQwr0m+/tquZZQA3Af2AvsBNhaFSKu5eZV/A4cC4iO7rgevjXVeM1vUN4GfAXKBp2K8pMDd8/xBwVsT4P4xXWV5Ai/A/zU+AtwAjuLs0pej2BsYBh4fvU8LxLN7rcADrXAdYWLT2BN/OzYGlQEa47d4CjknEbQ1kATMPdLsCZwEPRfT/n/FKelXpPQj++4dWaFnYL6GEu9Q9gUlAY3dfCRD+2ygcLRE+i7uBa4GCsLsBsMnd88PuyHX6YX3D4ZvD8SubtsBa4Inw0NqjZlaTBN7O7r4cuANYAqwk2HZTSfxtDfu/XQ9qe1f1gLAo/RLqul8zqwW8Alzl7luKGzVKv0rzWZjZ8cAad58a2TvKqF6KYZVJCtAL+Le79wS289/DDtFU+vUOD5GcCLQBmgE1CQ6xFJVo27o4+1rHg1r3qh4Qy4CWEd0tgBVxqqXMmVkqQTg86+6vhr1Xm1nTcHhTYE3Yv7J/FgOA4Wa2CBhDcJjpbqCemaWE40Su0w/rGw6vC2woz4LLyDJgmbtPCrtfJgiMRN3OAEOBhe6+1t3zgFeBI0j8bQ37v10PantX9YCYArQPr35IIzjRNTbONZUJMzPgMWCOu98ZMWgsUHglw0iCcxOF/c8Pr4boD2wu3JWtDNz9endv4e5ZBNvxY3c/B/gEGBGOVnR9Cz+HEeH4le5XpbuvApaaWcew10+B2STodg4tAfqbWY3w77xwnRN6W4f2d7uOA442s/rhntfRYb/SifdJmHi/gOOA74H5wO/jXU8ZrteRBLuS04FvwtdxBMdePwLmhf9mhOMbwRVd84EZBFeIxH09DnDdhwBvhe/bApOBXOAloFrYPz3szg2Ht4133Qexvj2AnHBbvw7UT/TtDPwJ+A6YCfwHqJZo2xp4nuAcSx7BnsCFB7JdgQvCdc8FfrE/NaipDRERiaqqH2ISEZF9UECIiEhUCggREYlKASEiIlEpIEREJCoFhFRYZuZm9s+I7t+a2c1lNO8nzWxEyWMe9HJOC1tY/aRI/2Zm9nL4voeZHVeGy6xnZr+KtiyR/aGAkIpsN3CKmTWMdyGRwlaAS+tC4FfuflRkT3df4e6FAdWD4B6V/akhpZjB9YAfAqLIskRKTQEhFVk+wbN2f1N0QNE9ADPbFv47xMzGm9mLZva9mf3dzM4xs8lmNsPM2kXMZqiZfR6Od3w4fbKZ3W5mU8J29X8ZMd9PzOw5ghuRitZzVjj/mWb2j7DfHwluWHzQzG4vMn5WOG4acAtwhpl9Y2ZnmFnN8FkAU8IG+E4MpxllZi+Z2ZvA+2ZWy8w+MrNp4bJPDGf/d6BdOL/bC5cVziPdzJ4Ix//azI6KmPerZvaeBc8NuC3i83gyrHWGmf1oW0jiKu5XiEhFcD8wvfALq5S6A50J2ttZADzq7n0teGjSFcBV4XhZwGCgHfCJmR0CnE/QTEEfM6sGfGlm74fj9wW6ufvCyIWZWTOCZwz0JngOwftmdpK732JmPwF+6+450Qp19z1hkGS7++Xh/P5K0BzEBWZWD5hsZh+GkxwOHObuG8K9iJPdfUu4lzXRzMYSNNbXzd17hPPLiljk6HC5h5pZp7DWDuGwHgSt/u4G5prZvQSthTb34LkLhPVIFaE9CKnQPGiB9mmCB8SU1hR3X+nuuwmaHij8gp9BEAqFXnT3AnefRxAknQjaqjnfzL4haB69AcFDWAAmFw2HUB/gUw8aj8sHngUG7Ue9RR0NXBfW8ClBUxGtwmEfuHthQ3MG/NXMpgMfEjTj3LiEeR9J0DQF7v4dsBgoDIiP3H2zu+8iaNuoNcHn0tbM7jWzYUBxLQJLgtEehFQGdwPTgCci+uUT/sAJG2xLixi2O+J9QUR3Af/7N1+0nZnC5pGvcPf/adDMzIYQNKUdTbQmlQ+GAae6+9wiNfQrUsM5QCbQ293zLGjJNr0U896XyM9tL8HDdzaaWXeCB/KMBk4naNtHqgDtQUiFF/5ifpH/PkISYBHBIR0Ing2QegCzPs3MksLzEm0JnsI1DrjMgqbSMbMOFjyApziTgMFm1jA8gX0WMH4/6tgK1I7oHgdcEQYfZtZzH9PVJXgGRl54LqH1PuYX6TOCYCE8tNSKYL2jCg9dJbn7K8AfCJoSlypCASGVxT+ByKuZHiH4Up5M8Lzdff26L85cgi/yd4FLw0MrjxIcXpkWnth9iBL2tD1oVvl6guamvwWmufsbxU1TxCdAl8KT1MCfCQJveljDn/cx3bNAtpnlEHzpfxfWs57g3MnMoifHgQeAZDObAbwAjAoPxe1Lc+DT8HDXk+F6ShWh1lxFRCQq7UGIiEhUCggREYlKASEiIlEpIEREJCoFhIiIRKWAEBGRqBQQIiIS1f8DKKxoV0ccXt4AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#alpha = 0.001\n",
    "plotResults(X_train_1,y_train_1,X_test_1,y_test_1,beta,1000,0.001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The beta values: [[ 2.34770398e-03  5.01846819e-01  3.95894526e-01  8.66362932e-02\n",
      "  -3.95055803e-01 -3.79943768e-01  1.16258605e-03 -1.79724275e-04\n",
      "  -1.02540184e-02 -1.33575010e-02 -3.95193931e-02 -5.93615137e-02\n",
      "  -7.41656506e-03 -8.36603149e-02 -2.08613976e-02]]\n",
      "The cost function value: 0.21914136048895666\n",
      "Train data MSE: 0.4382827209779133\n",
      "Test data MSE: 0.44003561032691835\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#alpha = 0.01\n",
    "plotResults(X_train_1,y_train_1,X_test_1,y_test_1,beta,1000,0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The beta values: [[ 2.33948332e-03  5.03317841e-01  3.97156081e-01  8.75300622e-02\n",
      "  -3.96713438e-01 -3.81541181e-01  1.01563784e-03 -1.89404510e-04\n",
      "  -1.02619197e-02 -1.48924740e-02 -4.08389388e-02 -5.93508763e-02\n",
      "  -7.42694707e-03 -8.36775653e-02 -2.08593540e-02]]\n",
      "The cost function value: 0.21913770667625232\n",
      "Train data MSE: 0.43827541335250464\n",
      "Test data MSE: 0.44003368811490734\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#alpha = 0.1\n",
    "plotResults(X_train_1,y_train_1,X_test_1,y_test_1,beta,1000,0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 281,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Coefficients: \n",
      " [ 0.50200964  0.39852238  0.08612254 -0.39850056 -0.38287982  0.0030769\n",
      "  0.0006322  -0.00864278 -0.01585373 -0.04094683 -0.0601491  -0.00638996\n",
      " -0.08422928 -0.02067484]\n"
     ]
    }
   ],
   "source": [
    "# defining feature matrix(X) and response vector(y) \n",
    "X = df.iloc[:, 0:14]\n",
    "y = df[\"log_avg_run\"]\n",
    "  \n",
    "# splitting X and y into training and testing sets \n",
    "from sklearn.model_selection import train_test_split \n",
    "from sklearn.linear_model import LinearRegression\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, \n",
    "                                                    random_state=1) \n",
    "  \n",
    "# create linear regression object \n",
    "reg = LinearRegression() \n",
    "  \n",
    "# train the model using the training sets \n",
    "reg.fit(X_train, y_train) \n",
    "  \n",
    "# regression coefficients \n",
    "print('Coefficients: \\n', reg.coef_) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#set hyper parameters\n",
    "alpha = [0.0001,0.001,0.05,0.01,0.1] #learning rate\n",
    "iters = 50000 #no.of iterations\n",
    "#threshold = [0.00001,0.000015,0.00002,0.000025]\n",
    "\n",
    "finalCost_train = []\n",
    "finalCost_test = []\n",
    "for i in alpha:\n",
    "    g,cost = gradientDescent(X,Y,beta,iters,i)\n",
    "    finalCost_train.append(cost[-1]) \n",
    "    finalCost_test.append(calculateCost(X_test,y_test,g))\n",
    "\n",
    "fig , ax = plt.subplots()\n",
    "ax.plot(finalCost_train,alpha)\n",
    "ax.set_xlabel('Cost')  \n",
    "ax.set_ylabel('Alpha')  \n",
    "ax.set_title('cost vs. Training set Alpha')  \n",
    "\n",
    "fig , ax = plt.subplots()\n",
    "ax.plot(finalCost_test,alpha)\n",
    "ax.set_xlabel('Cost')  \n",
    "ax.set_ylabel('Alpha')  \n",
    "ax.set_title('cost vs. Test set Alpha')  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Experiment 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Dot product shape mismatch, (241600, 14) vs (15, 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-93-efffdf25ff2f>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0malpha\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m0.01\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mconv_th\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 7\u001b[1;33m     \u001b[0mbeta_c\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mcost_c\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mconvg_c\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mgradientDescentThresh\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mY\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mbeta\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0malpha\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0miters\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      8\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      9\u001b[0m     \u001b[0mY_hat_train\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mX\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mbeta_c\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mT\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-91-21f148e26526>\u001b[0m in \u001b[0;36mgradientDescentThresh\u001b[1;34m(X, Y, beta, alpha, i, iters)\u001b[0m\n\u001b[0;32m      5\u001b[0m     \u001b[0mconvg\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      6\u001b[0m     \u001b[1;32mwhile\u001b[0m \u001b[0mdiff\u001b[0m \u001b[1;33m>\u001b[0m \u001b[0mthresh\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 7\u001b[1;33m         \u001b[0mbeta\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mbeta\u001b[0m \u001b[1;33m-\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0malpha\u001b[0m\u001b[1;33m/\u001b[0m\u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m*\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msum\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m \u001b[1;33m*\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m \u001b[1;33m@\u001b[0m \u001b[0mbeta\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mT\u001b[0m \u001b[1;33m-\u001b[0m \u001b[0mY\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      8\u001b[0m         \u001b[0mcost\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcalculateCost\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mY\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbeta\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      9\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcost\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m==\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m__matmul__\u001b[1;34m(self, other)\u001b[0m\n\u001b[0;32m   1096\u001b[0m         \u001b[0mMatrix\u001b[0m \u001b[0mmultiplication\u001b[0m \u001b[0musing\u001b[0m \u001b[0mbinary\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m`\u001b[0m\u001b[1;33m@\u001b[0m\u001b[0;31m`\u001b[0m \u001b[0moperator\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mPython\u001b[0m\u001b[1;33m>=\u001b[0m\u001b[1;36m3.5\u001b[0m\u001b[1;33m.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1097\u001b[0m         \"\"\"\n\u001b[1;32m-> 1098\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mother\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1099\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1100\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__rmatmul__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mother\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36mdot\u001b[1;34m(self, other)\u001b[0m\n\u001b[0;32m   1074\u001b[0m                 raise ValueError(\n\u001b[0;32m   1075\u001b[0m                     \u001b[1;34m\"Dot product shape mismatch, \"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1076\u001b[1;33m                     \u001b[1;34m\"{s} vs {r}\"\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ms\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mlvals\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mr\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mrvals\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1077\u001b[0m                 )\n\u001b[0;32m   1078\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: Dot product shape mismatch, (241600, 14) vs (15, 1)"
     ]
    }
   ],
   "source": [
    "conv_th = [0.0001,0.00001,0.000001,0.0000001,0.00000001,0.0000000001]\n",
    "MSE_test = []\n",
    "MSE_train = []\n",
    "GD_iters = []\n",
    "alpha = 0.01\n",
    "for i in conv_th:\n",
    "    beta_c,cost_c,convg_c = gradientDescentThresh(X,Y,beta,alpha,i,iters)\n",
    "    \n",
    "    Y_hat_train = X.dot(beta_c.T)\n",
    "    Y_hat_test = X_test.dot(beta_c.T)\n",
    "   \n",
    "    #MSE Calculation for training dataset\n",
    "    MSE_train_a = (np.sum((Y - Y_hat_train) ** 2) / len(Y));\n",
    "    print(\"Train data MSE:\", MSE_train)\n",
    "    \n",
    "    #MSE Calculation for test dataset\n",
    "    MSE_test_a = (np.sum((Y_test - Y_hat_test) ** 2) / len(Y_test));\n",
    "    print(\"Test data MSE:\", MSE_test)\n",
    "    \n",
    "    MSE_test.append(MSE_test_a)\n",
    "    MSE_train.append(MSE_train_a)\n",
    "    GD_iters.append(convg_c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Implement batch gradient descent with convergence threshold as input\n",
    "#Calculate Test and Train dataset MSE at each iteration\n",
    "def gradientDescentMSE(X,Y,X_test,Y_test,beta,alpha,thresh,iters=5000):\n",
    "    Test_error = []\n",
    "    Train_error = []\n",
    "    cost = []\n",
    "    diff = 1\n",
    "    convg = 0\n",
    "    while diff > thresh:\n",
    "        beta = beta - (alpha/len(X)) * np.sum(X * (X @ beta.T - Y), axis=0)\n",
    "        cost.append(calculateCost(X, Y, beta))\n",
    "        \n",
    "        Y_hat_train = X.dot(beta.T)\n",
    "        Y_hat_test = X_test.dot(beta.T)\n",
    "        \n",
    "        #MSE Calculation for training dataset\n",
    "        MSE_train = (np.sum((Y - Y_hat_train) ** 2) / len(Y));\n",
    "        #print(\"Train data MSE:\", MSE_train)\n",
    "    \n",
    "        #MSE Calculation for test dataset\n",
    "        MSE_test = (np.sum((Y_test - Y_hat_test) ** 2) / len(Y_test));\n",
    "        #print(\"Test data MSE:\", MSE_test)\n",
    "        \n",
    "        Test_error.append(MSE_test)\n",
    "        Train_error.append(MSE_train)\n",
    "        \n",
    "        if len(cost)==1:\n",
    "            diff = cost[0]\n",
    "        else:\n",
    "            diff = abs(cost[-1] - cost[-2])\n",
    "            if diff <= thresh:\n",
    "                convg = len(cost)\n",
    "    return Test_error,Train_error,convg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "thresh = 0.0000001\n",
    "alpha = 0.05\n",
    "Test_err,Train_err,convg = gradientDescentMSE(X_train_1,y_train_1,X_test_1,y_test_1,beta,\n",
    "                                                     alpha,thresh)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(Test_err, label = \"Test Error\")\n",
    "#plt.plot(Train_err, label = \"Train Error\")\n",
    "plt.xlabel('Gradient Descent Iterations', fontsize=12)\n",
    "plt.ylabel('MSE Error', fontsize=12)\n",
    "plt.title('Test error vs Number of GD Iterations', fontsize=14)\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Experiment 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [],
   "source": [
    "ls = ['MWG', 'NWG', 'KWG', 'MDIMC', 'NDIMC', 'MDIMA', 'NDIMB', 'KWI', 'VWM', 'VWN', 'STRM', 'STRN', 'SA', 'SB']\n",
    "rand_set = random.sample(ls, 8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['SA', 'STRM', 'MDIMC', 'MDIMA', 'KWI', 'KWG', 'SB', 'NDIMC', 'log_avg_run']"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ls_rand = rand_set + ['log_avg_run']\n",
    "ls_rand"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SA</th>\n",
       "      <th>STRM</th>\n",
       "      <th>MDIMC</th>\n",
       "      <th>MDIMA</th>\n",
       "      <th>KWI</th>\n",
       "      <th>KWG</th>\n",
       "      <th>SB</th>\n",
       "      <th>NDIMC</th>\n",
       "      <th>log_avg_run</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.210997</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>0.118479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.210997</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.228050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.210997</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.207353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.210997</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.142961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.210997</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>0.135766</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    SA  STRM     MDIMC     MDIMA  KWI       KWG   SB     NDIMC  log_avg_run\n",
       "0 -1.0  -1.0 -0.753894 -0.998054 -1.0 -1.210997 -1.0 -0.753894     0.118479\n",
       "1 -1.0  -1.0 -0.753894 -0.998054 -1.0 -1.210997  1.0 -0.753894    -0.228050\n",
       "2  1.0  -1.0 -0.753894 -0.998054 -1.0 -1.210997 -1.0 -0.753894    -0.207353\n",
       "3  1.0  -1.0 -0.753894 -0.998054 -1.0 -1.210997  1.0 -0.753894    -0.142961\n",
       "4 -1.0  -1.0 -0.753894 -0.998054 -1.0 -1.210997 -1.0 -0.753894     0.135766"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Normalize using StandardScaler function\n",
    "sc_data = StandardScaler()\n",
    "Lin_rand = df[ls_rand]\n",
    "Lin_rand = sc_data.fit_transform(Lin_rand)\n",
    "Lin_rand = pd.DataFrame(Lin_rand)\n",
    "Lin_rand.columns = ls_rand\n",
    "Lin_rand.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Conversion to matrices\n",
    "X = Lin_rand.iloc[:,0:8]\n",
    "ones = np.ones([X.shape[0],1])\n",
    "X = np.concatenate((ones,X),axis=1)\n",
    "\n",
    "Y = Lin_rand.iloc[:,8:].values \n",
    "beta = np.zeros([1,9])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Splitting the data into training and test set\n",
    "X_train_3,X_test_3,y_train_3,y_test_3 = train_test_split(X,Y,test_size = 0.3,random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The beta values: [[-25.28529831  -4.29975115  -3.00861507 -20.24637856   0.28798798\n",
      "   -0.53702966   0.74777098  -1.40715595 -19.0272478 ]]\n",
      "The cost function value: -9.126557300834321\n",
      "Train data MSE: 1246.5816020221482\n",
      "Test data MSE: 1253.8112001543357\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#alpha = 0.1\n",
    "plotResults(X_train_3,y_train_3,X_test_3,y_test_3,beta,1500,0.1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Experiment 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x864 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Using Pearson Correlation\n",
    "plt.figure(figsize=(14,12))\n",
    "cor = df.corr()\n",
    "Sb.heatmap(cor, annot=True, cmap=plt.cm.Blues)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MWG            0.459029\n",
       "NWG            0.346429\n",
       "KWG            0.020358\n",
       "MDIMC          0.252085\n",
       "NDIMC          0.243448\n",
       "MDIMA          0.023076\n",
       "NDIMB          0.033688\n",
       "KWI            0.011200\n",
       "VWM            0.209574\n",
       "VWN            0.145031\n",
       "STRM           0.058792\n",
       "STRN           0.007790\n",
       "SA             0.084739\n",
       "SB             0.020323\n",
       "log_avg_run    1.000000\n",
       "Name: log_avg_run, dtype: float64"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Correlation with output variable\n",
    "output = abs(cor[\"log_avg_run\"])\n",
    "output\n",
    "\n",
    "# As per the below records, we can see that the least correlated variables are STRN 0.007790, KWI 0.011200, SB 0.020323, KWG 0.020358, MDIMA 0.023076 \n",
    "# and NDIMB 0.033688"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['MWG', 'NWG', 'MDIMC', 'NDIMC', 'VWM', 'VWN', 'STRM', 'SA', 'log_avg_run']"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_lin = ['MWG', 'NWG', 'MDIMC', 'NDIMC', 'VWM', 'VWN', 'STRM', 'SA', 'log_avg_run']\n",
    "new_lin"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MWG</th>\n",
       "      <th>NWG</th>\n",
       "      <th>MDIMC</th>\n",
       "      <th>NDIMC</th>\n",
       "      <th>VWM</th>\n",
       "      <th>VWN</th>\n",
       "      <th>STRM</th>\n",
       "      <th>SA</th>\n",
       "      <th>log_avg_run</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.118479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.228050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.207353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.142961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.135766</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        MWG       NWG     MDIMC     NDIMC       VWM       VWN  STRM   SA  \\\n",
       "0 -1.516757 -1.516757 -0.753894 -0.753894 -0.741449 -0.741449  -1.0 -1.0   \n",
       "1 -1.516757 -1.516757 -0.753894 -0.753894 -0.741449 -0.741449  -1.0 -1.0   \n",
       "2 -1.516757 -1.516757 -0.753894 -0.753894 -0.741449 -0.741449  -1.0  1.0   \n",
       "3 -1.516757 -1.516757 -0.753894 -0.753894 -0.741449 -0.741449  -1.0  1.0   \n",
       "4 -1.516757 -1.516757 -0.753894 -0.753894 -0.741449 -0.741449  -1.0 -1.0   \n",
       "\n",
       "   log_avg_run  \n",
       "0     0.118479  \n",
       "1    -0.228050  \n",
       "2    -0.207353  \n",
       "3    -0.142961  \n",
       "4     0.135766  "
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Normalize using StandardScaler function\n",
    "sc_data = StandardScaler()\n",
    "Lin_R = df[new_lin]\n",
    "Lin_R = sc_data.fit_transform(Lin_R)\n",
    "Lin_R = pd.DataFrame(Lin_R)\n",
    "Lin_R.columns = new_lin\n",
    "Lin_R.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Conversion to matrices\n",
    "X = Lin_R.iloc[:,0:8]\n",
    "ones = np.ones([X.shape[0],1])\n",
    "X = np.concatenate((ones,X),axis=1)\n",
    "\n",
    "Y = Lin_R.iloc[:,8:].values \n",
    "beta = np.zeros([1,9])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Splitting the data into training and test set\n",
    "X_train_4,X_test_4,y_train_4,y_test_4 = train_test_split(X,Y,test_size = 0.3,random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The beta values: [[-39.17328069  36.6206465   29.23283011 -24.96833249 -24.36803521\n",
      "    8.25844903   5.48584225  -4.75780644  -6.46927934]]\n",
      "The cost function value: nan\n",
      "Train data MSE: 4874.674328782957\n",
      "Test data MSE: 4848.488509551303\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#alpha = 0.1\n",
    "plotResults(X_train_4,y_train_4,X_test_4,y_test_4,beta,1500,0.1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Logistic Regression "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [],
   "source": [
    "dv = pd.read_csv(\"C:\\\\Surbhi\\\\Applied ML\\\\sgemm_product_dataset\\\\sgemm_product.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MWG</th>\n",
       "      <th>NWG</th>\n",
       "      <th>KWG</th>\n",
       "      <th>MDIMC</th>\n",
       "      <th>NDIMC</th>\n",
       "      <th>MDIMA</th>\n",
       "      <th>NDIMB</th>\n",
       "      <th>KWI</th>\n",
       "      <th>VWM</th>\n",
       "      <th>VWN</th>\n",
       "      <th>STRM</th>\n",
       "      <th>STRN</th>\n",
       "      <th>SA</th>\n",
       "      <th>SB</th>\n",
       "      <th>Run1 (ms)</th>\n",
       "      <th>Run2 (ms)</th>\n",
       "      <th>Run3 (ms)</th>\n",
       "      <th>Run4 (ms)</th>\n",
       "      <th>avg_run</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>115.26</td>\n",
       "      <td>115.87</td>\n",
       "      <td>118.55</td>\n",
       "      <td>115.80</td>\n",
       "      <td>116.3700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>78.13</td>\n",
       "      <td>78.25</td>\n",
       "      <td>79.25</td>\n",
       "      <td>79.19</td>\n",
       "      <td>78.7050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>79.84</td>\n",
       "      <td>80.69</td>\n",
       "      <td>80.76</td>\n",
       "      <td>80.97</td>\n",
       "      <td>80.5650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>84.32</td>\n",
       "      <td>89.90</td>\n",
       "      <td>86.75</td>\n",
       "      <td>85.58</td>\n",
       "      <td>86.6375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>115.13</td>\n",
       "      <td>121.98</td>\n",
       "      <td>122.73</td>\n",
       "      <td>114.81</td>\n",
       "      <td>118.6625</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   MWG  NWG  KWG  MDIMC  NDIMC  MDIMA  NDIMB  KWI  VWM  VWN  STRM  STRN  SA  \\\n",
       "0   16   16   16      8      8      8      8    2    1    1     0     0   0   \n",
       "1   16   16   16      8      8      8      8    2    1    1     0     0   0   \n",
       "2   16   16   16      8      8      8      8    2    1    1     0     0   1   \n",
       "3   16   16   16      8      8      8      8    2    1    1     0     0   1   \n",
       "4   16   16   16      8      8      8      8    2    1    1     0     1   0   \n",
       "\n",
       "   SB  Run1 (ms)  Run2 (ms)  Run3 (ms)  Run4 (ms)   avg_run  \n",
       "0   0     115.26     115.87     118.55     115.80  116.3700  \n",
       "1   1      78.13      78.25      79.25      79.19   78.7050  \n",
       "2   0      79.84      80.69      80.76      80.97   80.5650  \n",
       "3   1      84.32      89.90      86.75      85.58   86.6375  \n",
       "4   0     115.13     121.98     122.73     114.81  118.6625  "
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dv[\"avg_run\"] = dv.iloc[:,14:].mean(axis = 1)\n",
    "dv.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.245490733029061"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Taking log of the Average run times\n",
    "dv[\"log_avg_run\"] = np.log(dv.avg_run) \n",
    "median_run = dv['log_avg_run'].median()\n",
    "dv.loc[dv['log_avg_run'] >= median_run, 'run_class'] = 1\n",
    "dv.loc[dv['log_avg_run'] < median_run, 'run_class'] = 0\n",
    "median_run"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MWG</th>\n",
       "      <th>NWG</th>\n",
       "      <th>KWG</th>\n",
       "      <th>MDIMC</th>\n",
       "      <th>NDIMC</th>\n",
       "      <th>MDIMA</th>\n",
       "      <th>NDIMB</th>\n",
       "      <th>KWI</th>\n",
       "      <th>VWM</th>\n",
       "      <th>VWN</th>\n",
       "      <th>STRM</th>\n",
       "      <th>STRN</th>\n",
       "      <th>SA</th>\n",
       "      <th>SB</th>\n",
       "      <th>run_class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   MWG  NWG  KWG  MDIMC  NDIMC  MDIMA  NDIMB  KWI  VWM  VWN  STRM  STRN  SA  \\\n",
       "0   16   16   16      8      8      8      8    2    1    1     0     0   0   \n",
       "1   16   16   16      8      8      8      8    2    1    1     0     0   0   \n",
       "2   16   16   16      8      8      8      8    2    1    1     0     0   1   \n",
       "3   16   16   16      8      8      8      8    2    1    1     0     0   1   \n",
       "4   16   16   16      8      8      8      8    2    1    1     0     1   0   \n",
       "\n",
       "   SB  run_class  \n",
       "0   0        1.0  \n",
       "1   1        1.0  \n",
       "2   0        1.0  \n",
       "3   1        1.0  \n",
       "4   0        1.0  "
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dv.drop(['Run1 (ms)', 'Run2 (ms)','Run3 (ms)', 'Run4 (ms)', 'avg_run','log_avg_run'], axis = 1, inplace = True)\n",
    "dv.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [],
   "source": [
    "# defining feature matrix(X) and response vector(y) \n",
    "X = dv.iloc[:, 0:14]\n",
    "y = dv[\"run_class\"]\n",
    "  \n",
    "# splitting X and y into training and testing sets \n",
    "from sklearn.model_selection import train_test_split \n",
    "from sklearn.linear_model import LinearRegression\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, \n",
    "                                                    random_state=10) \n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "sc_data = StandardScaler()\n",
    "X_train = sc_data.fit_transform(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sigmoid(X,beta):\n",
    "    z = np.exp(X @ beta.T)\n",
    "    y_hat = (z/(1+z))\n",
    "    return y_hat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [],
   "source": [
    "def CalculateCostLog(y, y_hat):\n",
    "    cost = (-1/len(y))*np.sum((y * np.log(y_hat)) + ((1 - y) * np.log(1 - y_hat)),axis=0)\n",
    "    return cost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [],
   "source": [
    "# gradient descent algorithm\n",
    "def gradientDescentLog(X,y,beta,iters,alpha,diff=0.0000001):\n",
    "    cost = np.ones(iters)\n",
    "    for i in range(iters):\n",
    "        beta = beta - (alpha/len(X_train)) * np.sum(X * (sigmoid(X,beta) - y), axis=0)\n",
    "        cost[i] = CalculateCostLog(y, sigmoid(X,beta))\n",
    "        \n",
    "        if (abs((cost[i]-cost[i-1])/cost[i-1]) < diff).any():\n",
    "            print(\"Gradient Descent algorithm converged after\", i+1, \"Iterations\")\n",
    "            break \n",
    "    \n",
    "    return beta,cost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [],
   "source": [
    "def logistic_regression(X, y, alpha, iters):\n",
    "    n = X.shape[1]\n",
    "    one_a = np.ones((X.shape[0],1))\n",
    "    X = np.concatenate((one_a, X), axis = 1)\n",
    "    beta = np.zeros((1,n+1))\n",
    "    y = np.array(y).reshape((y.shape[0],1))\n",
    "    beta, cost = gradientDescentLog(X,y,beta,iters,alpha)\n",
    "    return beta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "beta_log = logistic_regression(X_train, y_train, 0.01, 5000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.0018761 ,  1.26881534,  0.8141489 ,  0.13484884, -0.85909199,\n",
       "        -0.73107699, -0.04301586, -0.06786615, -0.02198589, -0.05959038,\n",
       "        -0.12977278, -0.30983834, -0.0312735 , -0.38968715, -0.07676986]])"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "beta_log"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "def test_log(X_test,beta):\n",
    "    sc_data = StandardScaler()\n",
    "    X_test = sc_data.fit_transform(X_test)\n",
    "\n",
    "    one_a = np.ones((X_test.shape[0],1))\n",
    "    X_test = np.concatenate((one_a, X_test), axis = 1)\n",
    "\n",
    "    return sigmoid(X_test, beta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_predicted = test_log(X_test, beta_log)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    "dv_log = pd.DataFrame(y_test.values, columns=['y_actual']) \n",
    "dv_log = pd.concat([dv_log, pd.DataFrame(y_predicted)], axis=1, ignore_index=True)\n",
    "dv_log.columns = ['y_actual', 'y_hat']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "threshold = 0.5\n",
    "dv_log.loc[dv_log['y_hat'] >= threshold, 'y_pred'] = 1\n",
    "dv_log.loc[dv_log['y_hat'] < threshold, 'y_pred'] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix :\n",
      "[[29472  6637]\n",
      " [ 7142 29229]]\n",
      "Accuracy Score : 0.8098923841059603\n",
      "Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         0.0       0.80      0.82      0.81     36109\n",
      "         1.0       0.81      0.80      0.81     36371\n",
      "\n",
      "    accuracy                           0.81     72480\n",
      "   macro avg       0.81      0.81      0.81     72480\n",
      "weighted avg       0.81      0.81      0.81     72480\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Python script for confusion matrix creation. \n",
    "from sklearn.metrics import confusion_matrix \n",
    "from sklearn.metrics import accuracy_score \n",
    "from sklearn.metrics import classification_report \n",
    "\n",
    "results = confusion_matrix(dv_log['y_actual'], dv_log['y_pred']) \n",
    "print ('Confusion Matrix :')\n",
    "print(results) \n",
    "print ('Accuracy Score :',accuracy_score(dv_log['y_actual'], dv_log['y_pred']) )\n",
    "print ('Report : ')\n",
    "print (classification_report(dv_log['y_actual'], dv_log['y_pred']) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Implement batch gradient descent with convergence threshold as input\n",
    "#Stopping the iterations when the threshold is achieved\n",
    "def logRegGradientDescentThresh(X,Y,beta,alpha,thresh,iters=5000):\n",
    "    cost = []\n",
    "    diff = 1\n",
    "    convg = 0\n",
    "    while diff > thresh:\n",
    "        beta = beta - (alpha/len(X)) * np.sum(X * (X @ beta.T - Y), axis=0)\n",
    "        cost.append(calculateLogRegCost(X, Y, beta))\n",
    "        if len(cost)==1:\n",
    "            diff = cost[0]\n",
    "        else:\n",
    "            diff = abs(cost[-1] - cost[-2])\n",
    "            if diff <= thresh:\n",
    "                convg = len(cost)\n",
    "    return beta,cost,convg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "def logRegYPredict(X,beta,threshold):\n",
    "    y_pred = sigmoid(X,beta)\n",
    "    y_pred_class = np.zeros(len(y_pred))\n",
    "    for i in range(len(y_pred_class)):\n",
    "        if y_pred[i] < threshold:\n",
    "            y_pred_class[i] = 0\n",
    "        elif y_pred[i] >= threshold:\n",
    "            y_pred_class[i] = 1\n",
    "    return y_pred_class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "col_list = ['MWG', 'NWG', 'KWG', 'MDIMC', 'NDIMC', 'MDIMA', 'NDIMB', 'KWI', 'VWM', 'VWN', 'STRM', 'STRN', 'SA', 'SB']\n",
    "f_rand = random.sample(col_list, 8)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Feature List: ['STRN', 'KWG', 'SA', 'SB', 'NDIMC', 'MWG', 'NWG', 'VWM', 'log_avg_run']\n"
     ]
    }
   ],
   "source": [
    "log_rand = f_rand + ['log_avg_run']\n",
    "print(\"Random Feature List:\",log_rand)\n",
    "LogReg_feature = df[log_rand]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_log = LogReg_feature.iloc[:,0:8]\n",
    "ones = np.ones([X_log.shape[0],1])\n",
    "X_log = np.concatenate((ones,X_log),axis=1)\n",
    "Y_log = LogReg_feature.iloc[:,8]\n",
    "beta = np.zeros([1,9])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#threshold = median\n",
    "thresh = 4.243123698247448\n",
    "iters = 500\n",
    "alpha = 0.1\n",
    "\n",
    "X_train_LogReg, X_test_LogReg, y_train_LogReg, y_test_LogReg, beta_strt = LogReg(thresh,'Rand')\n",
    "beta_cal,cost_cal,convg_cal = logRegGradientDescent(X_train_LogReg,y_train_LogReg,beta_strt,iters,alpha)\n",
    "\n",
    "print(\"The beta values are:\",beta_cal)\n",
    "print(\"The final value of cost function is:\", cost_cal[-1])\n",
    "print(\"The value of cost function converges at:\", convg_cal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selected Feature List: ['MWG', 'NWG', 'MDIMC', 'NDIMC', 'VWM', 'VWN', 'STRM', 'SA', 'log_avg_run']\n"
     ]
    }
   ],
   "source": [
    "sel_feature = ['MWG', 'NWG', 'MDIMC', 'NDIMC', 'VWM', 'VWN', 'STRM', 'SA', 'log_avg_run']\n",
    "print(\"Selected Feature List:\",sel_feature)\n",
    "LogReg_feature = df[sel_feature]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_log = LogReg_feature.iloc[:,0:8]\n",
    "ones = np.ones([X_log.shape[0],1])\n",
    "X_log = np.concatenate((ones,X_log),axis=1)\n",
    "Y_log = LogReg_feature.iloc[:,8]\n",
    "beta = np.zeros([1,9])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Logistic Regression using Skilearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score \n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "scaler = StandardScaler()\n",
    "\n",
    "X_train = scaler.fit_transform(X_train)\n",
    "X_test = scaler.fit_transform(X_test)\n",
    "\n",
    "model = LogisticRegression()\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "predicted_classes = model.predict(X_test)\n",
    "accuracy = accuracy_score(y_test,predicted_classes)\n",
    "parameters = model.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8100993377483444"
      ]
     },
     "execution_count": 261,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
